export declare type MtObject = Record<string, any>;
export declare type SoFunc = ((val: any) => any) | any;
export declare type Primitive = boolean | number | string | symbol | null | undefined;
export declare type NonPrimitive = object;
export declare type Value = string | number | symbol | any[] | any;
export declare type KeyInx = string | number;
export declare type Collection = any[] | object;
export declare type Iteratee<T> = (value: any, key: KeyInx, collection?: any) => T;
export declare type Many<T> = T | ReadonlyArray<T>;
export declare type AtLeast<T> = T | Array<T>;
export declare type PropertyName = string | number | symbol;
export declare type NotVoid = {} | null | undefined;
export declare type AtLeastPropertyName = PropertyName | PropertyName[];
export declare type IterateeProperty<T> = Iteratee<T> | PropertyName;
export declare type IterateeAtLeastProperty<T> = Iteratee<T> | AtLeastPropertyName;
export declare type DataRow = MtObject;
export declare type DataTable = MtObject[];
export declare type MtFunction = (...args: any[]) => any;
export declare type FalseType = 'undefined' | 'nil' | 'false' | 'empty';
